"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsonwebtoken = require("jsonwebtoken");
const Redis_1 = require("./Redis");
const TokenInvalidError_1 = require("./error/TokenInvalidError");
const TokenDestroyedError_1 = require("./error/TokenDestroyedError");
class JWTRedis {
    constructor(redisClient, options) {
        this.redisClient = redisClient;
        this.options = Object.assign({ prefix: 'jwt_label:' }, options || {});
        this.redis = new Redis_1.default(redisClient);
    }
    sign(payload, secretOrPrivateKey, options) {
        return Promise.resolve()
            .then(async () => {
            const jti = payload.jti || generateId(10);
            const token = jsonwebtoken.sign(Object.assign({}, payload, { jti }), secretOrPrivateKey, options);
            const decoded = jsonwebtoken.decode(token);
            const key = this.options.prefix + jti;
            if (decoded.exp) {
                await this.redis.setExp(key, 'true', 'EX', Math.floor(decoded.exp - Date.now() / 1000));
            }
            else {
                await this.redis.set(key, 'true');
            }
            return token;
        });
    }
    destroy(jti) {
        const key = this.options.prefix + jti;
        return this.redis.del(key);
    }
    decode(token, options) {
        return jsonwebtoken.decode(token, options);
    }
    verify(token, secretOrPublicKey, options) {
        return new Promise((resolve, reject) => {
            return jsonwebtoken.verify(token, secretOrPublicKey, options, (err, decoded) => {
                if (err) {
                    return reject(err);
                }
                return resolve(decoded);
            });
        }).then((decoded) => {
            if (!decoded.jti) {
                throw new TokenInvalidError_1.default();
            }
            const key = this.options.prefix + decoded.jti;
            return this.redis.get(key)
                .then((result) => {
                if (!result) {
                    throw new TokenDestroyedError_1.default();
                }
                return decoded;
            });
        });
    }
}
exports.default = JWTRedis;
function generateId(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSldUUmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvSldUUmVkaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw2Q0FBNkM7QUFHN0MsbUNBQTRCO0FBSTVCLGlFQUEwRDtBQUMxRCxxRUFBOEQ7QUFPOUQsTUFBcUIsUUFBUTtJQUt6QixZQUE2QixXQUE4QixFQUFFLE9BQWlCO1FBQWpELGdCQUFXLEdBQVgsV0FBVyxDQUFtQjtRQUN2RCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxNQUFNLEVBQUUsWUFBWSxFQUFDLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLElBQUksQ0FBc0MsT0FBVSxFQUFFLGtCQUEwQixFQUFFLE9BQXFCO1FBQzFHLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRTthQUNuQixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDYixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQyxNQUFNLEtBQUssR0FBVyxZQUFZLENBQUMsSUFBSSxtQkFBSyxPQUFPLElBQUUsR0FBRyxLQUFHLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3hGLE1BQU0sT0FBTyxHQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ3RDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtnQkFDYixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMs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